{"/channel/intro":{"title":"Intro","data":{}},"/coroutine-context/intro":{"title":"Intro","data":{}},"/coroutine-dispatcher/intro":{"title":"Intro","data":{}},"/coroutine-scope-and-structured-concurrency/intro":{"title":"Intro","data":{}},"/coroutine-useful-case/intro":{"title":"Intro","data":{}},"/flow/intro":{"title":"Intro","data":{}},"/":{"title":"Introduction","data":{}},"/kotlin-basic/intro":{"title":"Intro","data":{}},"/suspend-and-fsm-cps/fsm-and-cps":{"title":"Fsm and Cps","data":{"fsm-cps#FSM, CPS":""}},"/suspend-and-fsm-cps/what-is-suspend-function":{"title":"What Is Suspend Function","data":{"코루틴의-개념-suspend-함수#코루틴의 개념, suspend 함수":"","코틀린의-코루틴#코틀린의 코루틴":"코틀린 코루틴은 비동기 프로그래밍을 위한 강력한 도구입니다.코루틴은 코드의 일부를 일시 중단하고 나중에 재개할 수 있는 경량 스레드로 볼 수 있습니다. 코루틴은 스레드 하나에서 여러 개의 코루틴으로 나눠서 병렬로 수행할 수 있습니다. 즉, 스레드에서 수행되는 개별적인 작업의 단위로 각각의 작업을 수행하는 것을 코루틴이라고 합니다. 코루틴은 코틀린에만 존재하는 것이 아닙니다. c, c++, javascript, go 등 현존하는 모든 프로그래밍 언어에 존재하는 개념이며, 아직 Java 에는 도입되지 않았습니다.","suspend-함수#suspend 함수":"suspend 함수는 코루틴을 구현하는 데 중요한 역할을 합니다. suspend 함수를 선언하려면  suspend 라는 키워드를 함수 앞에 붙여서 선언하면 suspend 함수가 됩니다. 이렇게 하면 컴파일러가 suspend 가 붙은 함수를 코루틴 내에서 사용할 수 있는 함수로 인식합니다. 코루틴 내에서 일시 중단이 가능한 모든 작업은 반드시 suspend 함수에서 수행되어야 합니다.","코틀린에서-기본적으로-제공하는-suspend-함수들#코틀린에서 기본적으로 제공하는 suspend 함수들":"코틀린에서 기본적으로 제공하는 대표적인 suspend 함수는 kotlinx.coroutines패키지 내의 Builders.common.kt에 있으며 launch, async, withContext 등이 있습니다.","async-launch-withcontext-는-coroutinescope-의-확장함수#async, launch, withContext 는 CoroutineScope 의 확장함수":"async, launch, withContext 함수는 suspend 함수라고 부르기도 합니다. 한가지 알아두고 넘어가야 할 것은 async, launch, withContext 는 CoroutineScope 안에서 동작한다는 점입니다. 그리고 async, launch,withContext 는 CoroutineScope 의 확장함수로 선언되어 있습니다.","suspend-함수의-주요-특징#suspend 함수의 주요 특징":"suspend 함수의 주요 특징은 아래와 같습니다.\nsuspend 함수는 일시 중단할 수 있는 함수입니다.\nsuspend 가 적용된 함수가 실행되는 동안 일시 중단될 경우, suspend 를 실행하는 동안 내부적으로는 다른 작업을 수행하거나 대기하게 됩니다. 즉, 논블로킹 기반으로 동작합니다. suspend 함수를 호출할 때에는 이 suspend 함수를 호출한 코루틴이 일시 중단됩니다.\nsuspend 함수를 사용하면 비동기적인 작업을 수행하는 동안 UI를 블로킹하지 않고도 작업을 수행할 수 있습니다.\n예를 들어 네트워크 호출이나 파일 I/O와 같은 작업을 수행할 때 suspend 함수를 사용하여 코루틴을 일시 중단하고 나중에 결과를 받아서 처리할 수 있습니다.\nsuspend 가 적용된 함수는 suspend 가 붙은 함수에서만 호출이 가능합니다.\nSpring Webflux 는 Controller 에 suspend 함수를 지원합니다. 따라서 Controller 내에서는 suspend 함수를 실행이 가능합니다.\nsuspend 가 적용되지 않은 함수이지만 라이브러리 함수여서 수정이 불가능하고 호출역시 불가능할 경우가 있습닏. 이 경우 아래의 두 방식으로 일반함수내에서 suspend 함수를 감싸서 실행하는 방식으로 사용이 가능합니다.\nkotlin-coroutines-reactor 의 mono 함수 내부에서 suspend 함수를 실행\nCoroutineScope(CoroutineDispatcher).future { ... } 를 사용하는 방식","suspend-기반의-kotlin-내장-함수들#suspend 기반의 kotlin 내장 함수들":"async, launch, withContext 말고도 코틀린의 kotlinx-coroutines-core 에서 제공하는 suspend 가 적용된 함수들은 많습니다. kotlin 라이브러리에서 제공하는 대표적으로 잘 알려진 suspend 함수들은 아래와 같습니다.\nwithContext : 코루틴 컨텍스트를 변경하는 함수입니다. 다른 스레드에서 코드를 실행하거나, 특정 디스패처에 작업을 보내는 것이 가능합니다.\ndelay : 일정 시간 동안 코루틴을 일시 중단하는 함수입니다. 주로 테스트나 간단한 딜레이를 구현할 때 사용됩니다.\nawait: Deferred 객체의 결과를 기다리는 함수로, async 함수로 생성된 Deferred 객체의 결과를 가져올 때 사용됩니다.\nlaunch: 백그라운드에서 비동기적으로 새로운 코루틴을 실행하는 함수로, 반환 값이 없는 Fire-and-forget 스타일의 코루틴을 생성합니다.\nrunBlocking: 새로운 블록 내에서 코루틴을 실행하는 함수로, 주로 메인 함수나 테스트 코드에서 사용되며, 코루틴을 기다리는 동안 블로킹을 유지합니다.\ncoroutineScope: 지정된 블록 내에서 새로운 코루틴 스코프를 생성하는 함수로, 지정된 블록 내의 코루틴이 완료될 때까지 대기합니다.\nselect: 여러 개의 중단 가능한 조건을 동시에 처리할 수 있는 함수로, 먼저 발생하는 이벤트를 처리하고 나머지는 무시합니다.\nsupervisorScope: 자식 코루틴이 실패하더라도 부모 코루틴이 중단되지 않도록 하는 슈퍼바이저 스코프를 생성하는 함수로, 자식 코루틴의 실패를 격리합니다.","fsm-cps-suspend-함수#FSM, CPS, suspend 함수":"suspend 가 붙은 함수를 suspend 함수 없이 내부적인 구현을 구현하면 결국은 FSM(Finite State Machine), CPS(Continuation Passing Style) 을 기반으로 한 재귀 호출구문으로 이뤄지게 됩니다. FSM 이라는 것은 유한 상태 기계라는 의미인데 일종의 label 을 통해 상태를 인식해서 다음 상태로 넘어가게 해주는 것을 의미하고 CPS 는 다음 상태로 지속이 가능한 객체인 Continuation 을 넘겨주는 방식을 의미합니다. Continuation 객체 내에는 주로 데이터를 처리하거나 바인딩하기 위한 구조체 같은 데이터가 포함됩니다.\n더 자세한 내용은 FSM, CPS 문서에 따로 정리해두겠습니다.","suspend-함수-예제#suspend 함수 예제":"","suspend-함수는-일시-중단할-수-있는-함수#suspend 함수는 일시 중단할 수 있는 함수":"","suspend-함수는-논블로킹-기반의-비동기-연산을-수행#suspend 함수는 논블로킹 기반의 비동기 연산을 수행":"","suspend-함수는-suspend-함수에서만-호출-가능#suspend 함수는 suspend 함수에서만 호출 가능":"","spring-webflux-의-에서는-suspend-를-지원#Spring Webflux 의 에서는 suspend 를 지원":"Spring Webflux 는 Controller 에 suspend 함수를 지원합니다. 따라서 아래 코드와 같이 Controller 내에서는 suspend 함수를 실행이 가능합니다.\npackage io.chagchagchag.demo.kotlin_coroutine\r\n\r\n// ...\r\n\r\n@RestController\r\n@RequestMapping(\"/healthcheck\")\r\nclass HealthCheckController {\r\n\r\n  private suspend fun ok(): String = \"OK\"\r\n\r\n  @GetMapping(\"/ready\")\r\n  suspend fun ready(): String{\r\n    return ok()\r\n  }\r\n}","mono-completablefuture-를-반환하는-라이브러리-함수가-suspend-함수가-아닐-경우#Mono, CompletableFuture 를 반환하는 라이브러리 함수가 suspend 함수가 아닐 경우":"kotlin-coroutines-reactor 의 mono 함수 내부에서 suspend 함수를 실행\nCoroutineScope(CoroutineDispatcher).future { ... } 를 사용하는 방식\nCoroutineScope(CoroutineDispatcher).future { ... }  내에서 suspend 함수를 실행하고, 반환되는 CompletableFuture를 thneAccept 등을 통해서 실행"}},"/suspend-and-fsm-cps/to-coroutine":{"title":"코루틴 코드로 바꿔보면","data":{}}}