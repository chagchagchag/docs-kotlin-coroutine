{"/channel/intro":{"title":"Intro","data":{}},"/coroutine-dispatcher/intro":{"title":"Intro","data":{}},"/coroutine-context/intro":{"title":"Intro","data":{}},"/coroutine-scope-and-structured-concurrency/intro":{"title":"Intro","data":{}},"/flow/intro":{"title":"Intro","data":{}},"/coroutine-useful-case/intro":{"title":"Intro","data":{}},"/":{"title":"Introduction","data":{}},"/suspend-and-fsm-cps/fsm-and-cps":{"title":"Fsm and Cps","data":{"fsm-cps#FSM, CPS":""}},"/kotlin-basic/intro":{"title":"Intro","data":{}},"/suspend-and-fsm-cps/to-coroutine":{"title":"코루틴 코드로 바꿔보면","data":{}},"/suspend-and-fsm-cps/what-is-suspend-function":{"title":"What Is Suspend Function","data":{"suspend-함수#suspend 함수":"","코틀린의-코루틴-그리고-suspend#코틀린의 코루틴, 그리고 suspend":"코틀린 코루틴은 비동기 프로그래밍을 위한 강력한 도구입니다.코루틴은 코드의 일부를 일시 중단하고 나중에 재개할 수 있는 경량 스레드로 볼 수 있습니다. suspend 함수는 이러한 코루틴을 구현하는 데 중요한 역할을 합니다. 보통 suspend 라는 키워드를 함수 앞에 붙여서 suspend 함수로 선언합니다. 이렇게 하면 컴파일러가 suspend 가 붙은 함수를 코루틴 내에서 사용할 수 있는 함수로 인식합니다. 코루틴 내에서 일시 중단이 가능한 모든 작업은 반드시 suspend 함수 에서 수행되어야 합니다.suspend 함수의 주요 특징은 아래와 같습니다.\nsuspend 함수는 일시 중단할 수 있는 함수입니다.\nsuspend 가 적용된 함수가 실행되는 동안 일시 중단될 경우, suspend 를 실행하는 동안 내부적으로는 다른 작업을 수행하거나 대기하게 됩니다. 즉, 논블로킹 기반으로 동작합니다. suspend 함수를 호출할 때에는 이 suspend 함수를 호출한 코루틴이 일시 중단됩니다.\nsuspend 함수를 사용하면 비동기적인 작업을 수행하는 동안 UI를 블로킹하지 않고도 작업을 수행할 수 있습니다.\n예를 들어 네트워크 호출이나 파일 I/O와 같은 작업을 수행할 때 suspend 함수를 사용하여 코루틴을 일시 중단하고 나중에 결과를 받아서 처리할 수 있습니다.","suspend-기반의-kotlin-내장-함수들#suspend 기반의 kotlin 내장 함수들":"코틀린의 kotlinx-coroutines-core 에서 제공하는 suspend 가 적용된 함수들은 아래와 같습니다.\nwithContext : 코루틴 컨텍스트를 변경하는 함수입니다. 다른 스레드에서 코드를 실행하거나, 특정 디스패처에 작업을 보내는 것이 가능합니다.\ndelay : 일정 시간 동안 코루틴을 일시 중단하는 함수입니다. 주로 테스트나 간단한 딜레이를 구현할 때 사용됩니다.\nawait: Deferred 객체의 결과를 기다리는 함수로, async 함수로 생성된 Deferred 객체의 결과를 가져올 때 사용됩니다.\nlaunch: 백그라운드에서 비동기적으로 새로운 코루틴을 실행하는 함수로, 반환 값이 없는 Fire-and-forget 스타일의 코루틴을 생성합니다.\nrunBlocking: 새로운 블록 내에서 코루틴을 실행하는 함수로, 주로 메인 함수나 테스트 코드에서 사용되며, 코루틴을 기다리는 동안 블로킹을 유지합니다.\ncoroutineScope: 지정된 블록 내에서 새로운 코루틴 스코프를 생성하는 함수로, 지정된 블록 내의 코루틴이 완료될 때까지 대기합니다.\nselect: 여러 개의 중단 가능한 조건을 동시에 처리할 수 있는 함수로, 먼저 발생하는 이벤트를 처리하고 나머지는 무시합니다.\nsupervisorScope: 자식 코루틴이 실패하더라도 부모 코루틴이 중단되지 않도록 하는 슈퍼바이저 스코프를 생성하는 함수로, 자식 코루틴의 실패를 격리합니다.","fsm-cps-와-suspend-함수#FSM, CPS 와 suspend 함수":"","suspend-함수는-suspend-함수에서만-호출-가능#suspend 함수는 suspend 함수에서만 호출 가능":"","spring-webflux-의-에서는-suspend-를-지원#Spring Webflux 의 에서는 suspend 를 지원":"","mono-completablefuture-를-반환하는-라이브러리-함수가-suspend-함수가-아닐-경우#Mono, CompletableFuture 를 반환하는 라이브러리 함수가 suspend 함수가 아닐 경우":"kotlin-coroutines-reactor\nCoroutineScope(CoroutineDispatcher).future { ... }"}}}